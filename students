class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_hw(self, mentor, course, grade):
        if grade not in range(1, 11):
            print(grade, '- недопустимая оценка')
            return
        if course not in self.grades:
            self.grades[course] = []
        if isinstance(mentor, Reviewer) and course in mentor.courses_attached and course in self.courses_in_progress:
            self.grades[course].append(grade)
        else:
            print('Ошибка')

    def __str__(self):
        return f'Имя: {self.name}\n' \
               f'Фамиия: {self.surname}\n' \
               f'Средняя оценка за домашние задания: {get_average(self.grades)}\n' \
               f'Курсы в процессе изучения: {get_str_from_courses(self.courses_in_progress)}\n' \
               f'Завершенные курсы: {get_str_from_courses(self.finished_courses)}'

    def __lt__(self, other):
        if isinstance(other, Student):
            return get_average(self.grades) < get_average(other.grades)
        else:
            return 'Неверное сравнение'

    def __gt__(self, other):
        if isinstance(other, Student):
            return get_average(self.grades) > get_average(other.grades)
        else:
            return 'Неверное сравнение'


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def rate_hw(self, student, course, grade):
        if grade not in range(1, 11):
            print(grade, '- недопустимая оценка')
            return
        if course not in self.grades:
            self.grades[course] = []
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            self.grades[course].append(grade)
        else:
            print('Ошибка')

    def __str__(self):
        return f'Имя: {self.name}\n' \
               f'Фамиия: {self.surname}\n' \
               f'Средняя оценка за лекции: {get_average(self.grades)}'

    def __lt__(self, other):
        if isinstance(other, Lecturer):
            return get_average(self.grades) < get_average(other.grades)
        else:
            return 'Неверное сравнение'

    def __gt__(self, other):
        if isinstance(other, Lecturer):
            return get_average(self.grades) > get_average(other.grades)
        else:
            return 'Неверное сравнение'


class Reviewer(Mentor):
   def __str__(self):
       return f'Имя: {self.name}\n' \
              f'Фамилия: {self.surname}'


def get_average(values):
    sum_ = 0
    grade_quantity = 0
    for course_ in values:
        for grade_ in values[course_]:
            sum_ += grade_
            grade_quantity += 1
    if grade_quantity == 0:
        return 0
    else:
        average_value = sum_ / grade_quantity
    return average_value


def get_str_from_courses(course_list):
    current_courses = ''
    for course_ in course_list:
        current_courses += course_ + ', '
    if len(current_courses) == 0:
        current_courses = 'Нет курсов'
    else:
        current_courses = current_courses[:len(current_courses) - 2]
    return current_courses


def get_average_grade_all(list_, course):
    sum_ = 0
    val_ = 0
    for student in list_:
        if course in student.grades:
            sum_ += sum(student.grades[course])
            val_ += len(student.grades[course])
    return sum_ / val_


lector1 = Lecturer('Otto', 'fon Bismark')
lector1.courses_attached.append('Docker')
reviewer1 = Reviewer('Porfirii', 'the Great')
reviewer1.courses_attached.append('Docker')
reviewer1.courses_attached.append('Bird watching')

reviewer2 = Reviewer('Laura', 'F')
reviewer2.courses_attached.append('Git')
reviewer2.courses_attached.append('Bird watching')

lector2 = Lecturer('James', 'Bond')
lector2.courses_attached.append('Git')
lector2.courses_attached.append('Docker')
lector2.courses_attached.append('Bird watching')

student1 = Student('Morty', 'Smith', 'Male')
student1.courses_in_progress.append('Docker')
student1.courses_in_progress.append('Reading')
student1.courses_in_progress.append('Git')
student1.finished_courses.append('Bird watching')

student2 = Student('Anna', 'Brown', 'Female')
student2.courses_in_progress.append('Bird watching')
student2.courses_in_progress.append('Docker')

student1.rate_hw(reviewer1,'Docker',6)
student1.rate_hw(reviewer1,'Docker',3)
student1.rate_hw(reviewer1,'Docker',9)
print('student1 grades: ', student1.grades)

lector1.rate_hw(student1, 'Docker', 7)
lector1.rate_hw(student1, 'Docker', 10)
lector1.rate_hw(student1, 'Docker', 1)
lector1.rate_hw(student1, 'Docker', 10)

student2.rate_hw(reviewer1,'Bird watching',10)
student2.rate_hw(reviewer1,'Docker', 5)
lector2.rate_hw(student1, 'Git', 10)
lector2.rate_hw(student2, 'Docker', 10)


print('lector1: ')
print(lector1)
print('\nlector2: ')
print(lector2)
print('\nreviewer1: ')
print(reviewer1)
print('\nreviewer2: ')
print(reviewer2)
print('\nstudent1: ')
print(student1)
print('\nstudent2: ')
print(student2)
print()
print(student1 < student2)
print(lector1 > lector2)
print(student1 > reviewer1)
print(lector2 > 10)

student_list= []
student_list.append(student1)
student_list.append(student2)

print('средняя оценка за курс: ')
print(get_average_grade_all(student_list, 'Docker'))

lector_list = []
lector_list.append(lector1)
lector_list.append(lector2)

print('средняя оценка у лектора: ')
print(get_average_grade_all(lector_list, 'Docker'))
